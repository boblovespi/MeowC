let fac: i32 -> i32 := n \mt {
    1; if n = 0,
    n * fac(n - 1); otherwise.
};

let fib: i32 -> i32 := n \mt {
    0; if n = 0,
    1; if n = 1,
    fib(n - 1) + fib(n - 2); otherwise.
};
/*
// test
*/
let main: 1 := []
{
    print "meow :3\n";
    print fac 7;
    print "\n";
    print double 500;
    print "\n";
    print const();
    print "\n";
    print add(1000, 2000);
    print '\n';
    print (curryAdd 1000)2000;
    print '\n';
    print fib 20;
};

let double: i32 -> i32 := n |-> [] 
{
    return n * 2;
};

let error: u8 := foo * bar;

let const: 1 -> u8 := a |-> 'h';

let add: i32 * i32 -> i32 := (x, y) |-> x + y;

let curryAdd: i32 -> i32 -> i32 := x \mt (y \mt x + y);

let tuple: i32 * i32 * i32 := (1, 2, 3);
let union: i32 + u8 := 1;
let unit: 1 := ();
/*
let num: i32 := 1 - 1 - 1;
let id: i32toi32 := x |-> x + 1;
let m: i8 := 'm';
*/
// let foo: bar := (A + B)(u + v);
// let curry: a -> a -> a := a;